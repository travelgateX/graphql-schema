type OrganizationData implements GroupCommonData {
  id: ID!
  code: ID!
  label: String
  type: GroupType!
  info: String
  # Only responses folders.(non-hierarchically)
  children(codes: [ID!], first: Int, last: Int, before: String, after:String, type: GroupType, codeStartsWith: String): GroupConnection
  # Response all descendents groups nodes in this group (nom-hierarchically)
  descendents(codes: [ID!],type:GroupType, first: Int, last: Int, before: String, after:String, codeStartsWith: String): GroupConnection
  # Response all parents groups nodes for this group (nom-hierarchically)
  parents(codes: [ID!], type: GroupType, first: Int, last: Int, before: String, after:String): GroupConnection
  owner: Member
  isEditable: Boolean!
  members(codes:[ID!],type: MemberType,first: Int, last: Int, before: String, after:String) : MemberConnection
  #APIs assigned to this group. Products have APIs.
  apis(codes: [ID!], first: Int, last: Int, before: String, after:String): APIConnection
  # Products asign to a organization
  products(codes: [ID!], first: Int, last: Int, before: String, after:String): ProductConnection
  # Response all members in this group's childrens (hierarchically)
  allMembers(codes:[ID!],type: MemberType,first: Int, last: Int, before: String, after:String) : MemberConnection
  # Access resources in a organization
  accesses(codes:[ID!], first: Int, last: Int, before: String, after:String): AccessConnection
  # Supplier resources in a organization
  suppliers(codes:[ID!], accessID:[ID!], first: Int, last: Int, before: String, after:String): SupplierConnection
  # Clients resources in a organization
  clients(codes:[ID!],name:[ID!],isActive:Boolean, first: Int, last: Int, before: String, after:String): ClientConnection
  domains: [Domain]!
}
