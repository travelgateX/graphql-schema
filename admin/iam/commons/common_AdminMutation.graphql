extend type AdminMutation{
  # Create organization. Require an user to be specified as the owner of the group.
  createOrganization(organization: CreateOrganizationInput!): Organization!
  # Suit Organization. Requires an existing organization and a specific template.
  suitOrganization(organization: SuitOrganizationInput!): Organization!
  # Suit folder.Requires an existing folder and a template
  createFolder(folder: CreateFolderInput!): Group!
  # Create member; requires specific group and role
  createMember(member: CreateMemberInput!) : Member!
  # Create group; group "owner" is optional
  createGroup(group: CreateGroupInput!): Group!
  # Update member additions or remove roles
  updateMember(member: UpdateMemberInput!): Member!
  # Grant permissions to member.
  grantPermissions(member: GrantPermissionsInput!): Member!
  # Revoke permissions to member.
  revokePermissions(member: GrantPermissionsInput!): Member!
  # Clone member. Requires source and destination member.
  clonePermissions(member: ClonePermissionsInput!) : Member!
  # Update group additions or remove APIs
  updateGroup(group: UpdateGroupInput!): Group!
  # Delete a member from specific group
  deleteMember(member: [DeleteMemberInput!]!): Member!
  # Delete group and members from this group
  deleteGroup(group: DeleteGroupInput!): Group!
  # Grant API to an existing group
  grantApiToGroup(group: UpdateGroupAPISInput): Group!
  # Remove API from an existing group
  revokeApiFromGroup(group: UpdateGroupAPISInput): Group!
  # Grant macro permission.
  grantMacroPermissionsToMember(input: GrantMacroPermissionInput!): Member!
  # Revoke macro permission
  revokeMacroPermissionsFromMember(input: GrantMacroPermissionInput!): Member!
  addContact(organizationCode:ID!,type:OrganizationContactType!,user:ID!):Organization!
  deleteContact(organizationCode:ID!,user:ID!):Organization!
  # Creates a Partner.
  createPartner(
    data: PartnerCreateInput!
    ): Partner!
  # Update a Partner.
  updatePartner(
    data: PartnerUpdateInput!
    where: PartnerWhereUniqueInput!
    ): Partner!
  # Delete a Partner, from all groups
  deletePartner(
    where: PartnerWhereUniqueInput!
    ): Partner!
  # Add Partner to a group
  addPartnerToOrganization(
    #Organization->Code
    organizationCode: ID!
    where: PartnerWhereUniqueInput!
    ):Partner!
  # Delete Partner from a group
  deletePartnerFromOrganization(
    #Organization->Code
    organizationCode: ID!
    where: PartnerWhereUniqueInput!
    ):Partner!
  # set the primary Partner for an organizationCode
  setPrimaryPartner(
    #Organization->Code
    organizationCode: ID!
    where: PartnerWhereUniqueInput!
    ): Partner!
  #@intern
  addAgent(PartnerCode:ID!,type:CustomerAgentType!,user:ID!):Partner!
  #@intern
  deleteAgent(PartnerCode:ID!,user:ID!):Partner!

}
